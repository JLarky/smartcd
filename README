###########
# smartcd #
###########

##############
# Quickstart #
##############

# Install the files and configure your shell
make install
make setup

# Or, you can set it up manually
cp bash_arrays ~/.bash_arrays
cp bash_varstash ~/.bash_varstash
cp bash_smartcd ~/.bash_smartcd

echo >> ~/.bash_profile '
source ~/.bash_arrays
source ~/.bash_varstash
source ~/.bash_smartcd
smartcd setup cd
smartcd setup pushd
smartcd setup popd
'

# And if you are an "autocd" user, you may want
echo >> ~/.bash_profile '
smartcd setup prompt-hook
'

# Go to a directory with special needs
user@host:~$ cd project

# And set a variable, temporarily.  It will revert to its prior value
# when you leave the directory.
user@host:~/project$ autostash PATH=./bin:$PATH

# Or edit the "enter" script
user@host:~/project$ smartcd edit enter

# Non-interactively
user@host:~/project$ echo 'autostash PATH=./temporary/path:$PATH' | smartcd edit enter

# If you like doing things by hand, you may prefer
mkdir -p ~/.smartcd/some/directory
echo 'autostash PATH=./temporary/path:$PATH' >> ~/.smartcd/some/directory/bash_enter

# And you can run things explicitly on leave, as well
echo 'echo "bye!"' >> ~/.smartcd/some/directory/bash_leave

# When a shell is started enter scripts will be run from / up to your current
# directory.  If you want the inverse to occur as well, having leave scripts run
# on shell exit, you'll want to hook the shell's EXIT trap like this:
smartcd setup exit-hook

####################
# More information #
####################

  bash_smartcd

The main motivation for this library was that I wanted was environment
variables that would set themselves when you go to a directory or its
child, and then unset themselves when you leave.  This powerful
alternative to the cd built-in gives you that, and more.

It works by running scripts which correspond to particular directories
on your computer.  When you change between directories that have the
relevant enter or leave scripts, they will be run as appropriate.

The primary way of doing this is to create a "cd" function which calls
"smartcd cd". This also works with push and popd.  The simplest way to
create these wrappers is to call "smartcd setup cd", "smartcd setup pushd",
and "smartcd setup pushd".

If you prefer (or in addition), you can hook the prompt command
This sets PROMPT_COMMAND in bash, or precmd in zsh.  This is done with
"smartcd setup prompt-hook".  After calling smartcd, it will call any prior
command for those hooks.  This allows users with the "autocd" option set
in their shell to also benefit from smartcd.

The commands that you want to run will live in a file under a directory
structure in your home directory named .smartcd.  The structure under
that should mirror the filesystem hierarchy you wish to configure.  For
example:

      Path         Action      Script
    ------------------------------------------------------------
     /foo/bar       enter     ~/.smartcd/foo/bar/bash_enter
     /foo/bar/baz   leave     ~/.smartcd/foo/bar/baz/bash_leave

You can edit and read these files with the smartcd command using the
"edit", "show", and "filename" actions.

    user@host:/usr/local/bin$ smartcd show leave
    /home/user/.smartcd/usr/local/bin/bash_leave does not exist

    user@host:/usr/local/bin$ smartcd show enter
    /home/user/.smartcd/usr/local/bin/bash_enter exists
    -------------------------------------------------------------------------
    echo "testing"
    -------------------------------------------------------------------------

    user@host:/usr/local/bin$ smartcd edit enter
    --> edits ~/.smartcd/usr/local/bin/bash_enter

    user@host:/usr/local/bin$ echo "some-command" | smartcd edit enter

One thing to note is that going from a directory to its child is not
considered "leaving", so the bash_leave will not be run until you go to
another directory that doesn't contain that same directory as part of
its path.  The scripts are run as appropriate if they exist for each
level going back to the common element between the paths:

If you cd from /foo/bar/baz to /foo/quux/biff

    1) bash_leave for /foo/bar/baz
    2) bash_leave for /foo/bar
    3) bash_enter for /foo/quux
    4) bash_enter for /foo/quux/biff

These scripts are run in the interactive shell by using the "source"
builtin, so any variables or other environment effects will take place
in the user's shell directly.

Any action you can take in the shell can be done in these scripts; you
are certainly not limited to varstash.  Other examples might include a
VCS update, starting a daemon, or even attaching to a particular screen
session!

In addition to configuring these scripts individually, smartcd supports
a template system, which can be set up to re-use common configuration
among many directories.  This is controlled with the "smartcd template"
action.

To create a new template based on the current directory, run:

    smartcd template create some_template_name

Then to install it, from some other directory run:

    smartcd template install some_template_name

This will prepopulate the template from the bash_enter and bash_leave
files corresponding to the working directory.  You can then edit the
contents and save it.  Anywhere you place the string __PATH__ will be
replaced with the destination directory when installing.  The template
editor has other commands, "edit", "show", "list", and "delete".

For more information, see the documentation in bash_smartcd itself.


  bash_varstash

This provides several functions for saving the value of an environment
variable to a temporary location so that you can edit the value of it,
and then later restore the original value.  The main functions are
called stash and unstash.

A variant of stash is provided called autostash.  If you run this and
smartcd is enabled, when you change out of the current directory, it
will automatically unstash for you, by calling autounstash.  You may
also manually run autounstash at any time whether or not you have
changed directories.

If you run stash, unstash, or autostash interactively, they will
instruct you on how to create files for smartcd to run those commands
for you.  If you do not wish to see this advice, set VARSTASH_QUIET=1.
The library can automatically follow its own advice and configure these
files if you set VARSTASH_AUTOCONFIG=1.  It can do so, but also give you
an opportunity to make additional edits to the relevant file, if you set
VARSTASH_AUTOEDIT=1.


  bash_arrays

Bash added array support in version 2.0, but it doesn't have a very good
set of supporting built-ins.  In particular, I find myself missing the
Perl functions push, pop, shift, unshift, reverse.  So, here they are.
The provided functions are:

  apush    - Add an element to the end of your array
  apop     - Remove the last element from the array and print it
  ashift   - Remove the first element from the array and print it
  aunshift - Add an element to the beginning of the array
  areverse - Reverse the order of elements in the array
  afirst   - Like ashift, but doesn't remove anything.
  alast    - Like apop, but doesn't remove anything.
  alen     - Print the current number of elements in the array
  acopy    - Copy an array into a new variable

See the documentation included in the file for more detail.



###########
# License #
###########
This code is Copyright (c) 2009-10 Dave Olszewski <cxreg@pobox.com>

You may distribute under the terms of either the GNU General Public
License v2 or the Artistic License.

############
# See also #
############

As with most ideas worth doing, there are other implementations of some
of the things provided by smartcd.  Here are a few of them, and how they
differ from this library.

ondir - http://swapoff.org/ondir.html
  * Written in C, and is executed by a "cd" function
  * Requires manual and explicit variable setting and unsetting

direnv - https://github.com/zimbatm/direnv/
  * Requires ruby
  * Works only with PROMPT_COMMAND or precmd
  * Does not walk directory hierarchy
  * Does not support functions or aliases
  * Is entirely "snapshot" based
  * Runs files directly out of local directory, similar to "legacy mode"

EnvWatcher - https://github.com/MrMasterplan/EnvWatcher
  * Requires python
  * Only supports bash
  * Is triggered manually, not automatically
  * Does not walk directory hierarchy
  * Is entirely "snapshot" based
  * Does not allow other actions besides environment variable switching
