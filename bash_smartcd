#!/bin/bash

################################################################################
# bash_smartcd - cd with some oomph
#
#   Copyright (c) 2009-10 Dave Olszewski <cxreg@pobox.com>
#   http://github.com/cxreg/cxregs-bash-tools
#
#   This code is released under GPL v2 and the Artistic License, and
#   may be redistributed under the terms of either.
#
#
#   This replacement for bash's built-in cd function gives you the
#   ability to run bash_enter and bash_leave scripts for each of
#   the directories you are traveling between.  The scripts are run
#   in the expected order to the most common root between where you
#   are, and where you're going.  These files reside in a hierarchy
#   under your home directory which mirrors the directories they
#   represent, for example:
#
#       /foo/bar/baz  ->  ~/.smartcd/foo/bar/baz
#
#   Basic usage:
#       # Install the library
#       cp .bash_smartcd ~
#
#       # Add it to your bash init script
#       . ~/.bash_smartcd
#       alias cd=smartcd
#
#       # Create some custom directives
#       echo 'echo "hi!"' > ~/.smartcd/somedir/bash_enter
#
#   This library combines very nicely with .bash_varstash to allow
#   you to set per-directory environment variables:
#
#       # bash_enter
#       stash PATH
#       export PATH=/something/extra:$PATH
#
#       # bash_leave
#       unstash PATH
#
#       # or the automagic version, which unstashes for you
#       autostash PATH
#       export PATH=/something/extra:$PATH
#
################################################################################

# Load array functions
. ~/.bash_arrays

function smartcd() {
    # First, take note of where we're starting from
    local wherenow=$(pwd)
    local run_from_smartcd=1

    # Go there and get the fully qualified path.  Also, fail first if it's an
    # invalid destination, before we do any more work.
    builtin cd "$@"
    if (( $? != 0 )); then return; fi;
    local where=$(pwd)

    # Collect the list of directories we're leaving
    unset leave_stack
    while [ "$wherenow" != "/" ]; do
        apush leave_stack "$wherenow"
        wherenow=$(dirname "$wherenow")
    done

    # Collect the list of directories we're entering
    local wherenow=$where
    unset enter_stack
    while [ "$wherenow" != "/" ]; do
        apush enter_stack "$wherenow"
        wherenow=$(dirname "$wherenow")
    done

    # Pop off common elements
    while [ -n "$(alast enter_stack)" ] && [ "$(alast enter_stack)" = "$(alast leave_stack)" ]; do
        apop enter_stack >/dev/null
        apop leave_stack >/dev/null
    done

    # Run leave_stack in lowest to highest
    while (( "$(alen leave_stack)" >= 1 )); do
        # ashift in a sub-shell doesn't work
        local dir=$(afirst leave_stack);
        ashift leave_stack >/dev/null
        builtin cd "$dir"
        local confdir="$HOME/.smartcd$dir"
        if [[ -f .bash_leave ]]; then
            echo "# NOTICE!  Deprecated .bash_leave found, please migrate this file to the new"
            echo "# format using the following (or similar) commands:"
            if [[ ! -d $confdir ]]; then
                echo "mkdir -p \"$confdir\""
            fi
            echo "cat \"$dir/.bash_leave\" >> \"$confdir/bash_leave\""
            echo "rm \"$dir/.bash_leave\""
        fi
        if [[ -f "$confdir/bash_leave" ]]; then
            . "$confdir/bash_leave"
        fi
        if [[ $(type -t autounstash) = "function" ]]; then
            autounstash
        fi
    done

    # Run enter_stack in highest to lowest
    while (( "$(alen enter_stack)" >= 1 )); do
        # apop in a sub-shell doesn't work
        local dir=$(alast enter_stack);
        apop enter_stack >/dev/null
        builtin cd "$dir"
        local confdir="$HOME/.smartcd$dir"
        if [[ -f .bash_enter ]]; then
            echo "# NOTICE!  Deprecated .bash_enter found, please migrate this file to the new"
            echo "# format using the following (or similar) commands:"
            if [[ ! -d $confdir ]]; then
                echo "mkdir -p \"$confdir\""
            fi
            echo "cat \"$dir/.bash_enter\" >> \"$confdir/bash_enter\""
            echo "rm \"$dir/.bash_enter\""
        fi
        if [[ -f "$confdir/bash_enter" ]]; then
            . "$confdir/bash_enter"
        fi
    done

    # Go and be happy
    builtin cd "$where"
}
