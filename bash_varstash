#!/bin/bash

################################################################################
# bash_varstash - Stash/unstash support for per-directory variables
#
#   Copyright (c) 2009-10 Dave Olszewski <cxreg@pobox.com>
#   http://github.com/cxreg/cxregs-bash-tools
#
#   This code is released under GPL v2 and the Artistic License, and
#   may be redistributed under the terms of either.
#
#
#   This library allows you to save the current value of a given environment
#   variable in a temporary location, so that you can modify it, and then
#   later restore its original value.
#
#   Note that you will need to be in the same directory you were in when you
#   stashed in order to successfully unstash.  This is because the temporary
#   variable is derived from your current working directory's path.
#
#   Usage:
#       stash PATH
#       export PATH=/something/else
#       [...]
#       unstash PATH
#
#   Note that this was written for use with, and works very well with,
#   .bash_smartcd.  See the documentation there for examples.
#
#   An alternate usage is `autostash' which will trigger autounstash when
#   leaving the directory, if combined with smartcd.  This reduces the amount
#   of explicit configuration you need to provide:
#
#       autostash PATH
#       export PATH=/something/else
#
################################################################################

function stash() {
    if [[ -z $run_from_smartcd && -z $run_from_autostash ]]; then
        local smartcd_dir=$HOME/.smartcd$(pwd)
        local help_action="stashing a variable"
        local help_dir=$smartcd_dir
        local help_cmd="echo stash $@ >> \"$smartcd_dir/bash_enter\""
        _manual_stash_notify
    fi

    while [[ -n $1 ]]; do
        local stash_which=$1
        if [[ -z $stash_which ]]; then
            continue
        fi

        local stash_name=$(_mangle_var $stash_which)
        eval export $stash_name='$'$stash_which

        shift
    done
}

function autostash () {
    if [[ -z $run_from_smartcd ]]; then
        local smartcd_dir=$HOME/.smartcd$(pwd)
        local help_action="autostashing a variable"
        local help_dir=$smartcd_dir
        local help_cmd="echo autostash $@ >> \"$smartcd_dir/bash_enter\""
        _manual_stash_notify
    fi

    local run_from_autostash=1
    while [[ -n $1 ]]; do
        stash $1
        local autostash_name=$(_mangle_var AUTOSTASH)
        if [[ -n ${!autostash_name} ]]; then
            eval export $autostash_name='"''$'$autostash_name' '$1'"'
        else
            eval export $autostash_name=$1
        fi

        shift
    done
}

function unstash() {
    if [[ -z $run_from_smartcd ]]; then
        local smartcd_dir=$HOME/.smartcd$(pwd)
        local help_action="unstashing a variable"
        local help_dir=$smartcd_dir
        local help_cmd="echo unstash $@ >> \"$smartcd_dir/bash_leave\""
        _manual_stash_notify
    fi

    while [[ -n $1 ]]; do
        local unstash_which=$1
        if [[ -z $unstash_which ]]; then
            continue
        fi

        local unstash_name=$(_mangle_var $unstash_which)
        if [[ ${!unstash_name} || ! ${!unstash_name-_} ]]; then
            eval export $unstash_which='$'$unstash_name
            unset $unstash_name
        fi

        shift
    done
}

function autounstash() {
    # If there is anything in (mangled) variable AUTOSTASH, then unstash it
    local autounstash_name=$(_mangle_var AUTOSTASH)
    if [[ -n ${!autounstash_name} ]]; then
        for autounstash_var in ${!autounstash_name}; do
            unstash $autounstash_var
        done
        unset $autounstash_name
    fi
}

function _mangle_var() {
    local mangle_var_where=$(pwd | /usr/bin/tr ' /-' '_')
    echo "_tmp_${mangle_var_where}_$1"
}

function _manual_stash_notify() {
    # instruct user how to create bash_enter or bash_leave
    echo "# You are manually $help_action.  To automatically perform this"
    echo "# whenever you enter this directory, paste the following command(s):"

    if [[ ! -d $help_dir ]]; then
        echo "mkdir -p \"$help_dir\""
    fi
    echo "$help_cmd"
}
