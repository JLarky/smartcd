#!/bin/bash

function smartcd_edit() {
    # Invoke the users editor (or vi) on the relevant file
    local file="$1"
    case $file in
        bash_enter|bash_leave) local type=${file#bash_};;
                  enter|leave) local type=$file; file="bash_$file";;
                            *) echo "Usage: smartcd_edit ( bash_enter | bash_leave )"
                               return
                               ;;
    esac

    if [[ -f "$HOME/.smartcd$(pwd)/$file" ]]; then
        smartcd_upgrade_database
    fi

    local smartcd_dir="$HOME/.smartcd/scripts$(pwd)"
    if [[ ! -d "$smartcd_dir" ]]; then
        command mkdir -p "$smartcd_dir"
    fi

    # Edit the file if interactive, otherwise write standard input to it
    if [[ -t 0 ]]; then
        local tmpfile=$(mktemp /tmp/smartcd-edit.XXXXXX) line=
        local _old_ifs="$IFS"
        IFS=$'\n'
        if [[ -f "$smartcd_dir/$file" ]]; then
            while builtin read -r line; do
                case $line in
                    # extremely hinky replacement here, very whitespace sensitive
                    *"smartcd template run"*) local tmpl=${line##*template run }
                                            tmpl=${tmpl%% *}
                                            echo "$line" >> "$tmpfile"
                                            echo "$(smartcd template show_part $tmpl ${file#bash_})" >> "$tmpfile"
                                            ;;
                                        *) echo "$line" >> "$tmpfile";;
                esac
            done < "$smartcd_dir/$file"
        else
            if [[ $type == "enter" ]]; then
                local enter_usage=$(cat <<EOF
  Some examples are editing your \$PATH or creating
# a temporary alias:
#
#     autostash PATH=__PATH__/bin:\$PATH
#     autostash alias restart="service stop; sleep 1; service start"
EOF
)
            fi
            command cat > "$tmpfile" << EOF
########################################################################
# smartcd $type - $(pwd)
#
# This is a smartcd script.  Commands you type will be run when you
# $type this directory.  The string __PATH__ will be replaced with
# the current path.$enter_usage
#
# See http://smartcd.org for more ideas about what can be put here
########################################################################
EOF
        fi
        ${EDITOR:-vi} "$tmpfile"
        if [[ $? == 0 ]]; then
            echo -n > "$smartcd_dir/$file"
            if [[ -s "$tmpfile" ]]; then
                local writing=1
                while builtin read -r line; do
                    case $line in
                        "# begin smartcd template"*) writing=;;
                        "# end smartcd template"*) writing=1;;
                                                *) if [[ -n $writing ]]; then echo "$line" >> "$smartcd_dir/$file"; fi;;
                    esac
                done < "$tmpfile"
            fi
        fi
        IFS="$_old_ifs"
        rm "$tmpfile"
    else
        command cat > "$smartcd_dir/$file"
    fi

    if [[ -f "$smartcd_dir/$file" && ! -s "$smartcd_dir/$file" ]]; then
        # Delete any file that is left empty
        command rm "$smartcd_dir/$file"
    fi
}

# It's probably better to use getopts or something for this, but since only one
# option at a time is valid right now, no need
function _smartcd_file_check() {
    local file=$1; shift
    local confdir="$HOME/.smartcd/scripts$(pwd)"

    if [[ -f "$HOME/.smartcd$(pwd)/$file" ]]; then
        smartcd_upgrade_database
    fi

    case $1 in
           -h|help) echo "Usage: $file [ edit | show | filename ]";;
       -f|filename) echo "$confdir/$file";;
           -e|edit) smartcd_edit $file;;
    -l|show|cat|'') if [[ -f "$confdir/$file" ]]; then
                        echo "$confdir/$file exists"
                        case $1 in
                           -l|show|cat) echo "-------------------------------------------------------------------------"
                                        command cat "$confdir/$file"
                                        echo "-------------------------------------------------------------------------"
                                        ;;
                        esac
                    else
                        echo "$confdir/$file does not exist"
                    fi
                    ;;
    esac
}
